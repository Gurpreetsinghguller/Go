package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"text/template"
)

type AutoGenerated struct {
	HasError bool
	Location struct {
		Name           string  `json:"name"`
		Region         string  `json:"region"`
		Country        string  `json:"country"`
		Lat            float64 `json:"lat"`
		Lon            float64 `json:"lon"`
		TzID           string  `json:"tz_id"`
		LocaltimeEpoch int     `json:"localtime_epoch"`
		Localtime      string  `json:"localtime"`
	} `json:"location"`
	Current struct {
		LastUpdatedEpoch int     `json:"last_updated_epoch"`
		LastUpdated      string  `json:"last_updated"`
		TempC            float64 `json:"temp_c"`
		TempF            float64 `json:"temp_f"`
		IsDay            int     `json:"is_day"`
		Condition        struct {
			Text string `json:"text"`
			Icon string `json:"icon"`
			Code int    `json:"code"`
		} `json:"condition"`
		WindMph    float64 `json:"wind_mph"`
		WindKph    float64 `json:"wind_kph"`
		WindDegree int     `json:"wind_degree"`
		WindDir    string  `json:"wind_dir"`
		PressureMb float64 `json:"pressure_mb"`
		PressureIn float64 `json:"pressure_in"`
		PrecipMm   float64 `json:"precip_mm"`
		PrecipIn   float64 `json:"precip_in"`
		Humidity   int     `json:"humidity"`
		Cloud      int     `json:"cloud"`
		FeelslikeC float64 `json:"feelslike_c"`
		FeelslikeF float64 `json:"feelslike_f"`
		VisKm      float64 `json:"vis_km"`
		VisMiles   float64 `json:"vis_miles"`
		Uv         float64 `json:"uv"`
		GustMph    float64 `json:"gust_mph"`
		GustKph    float64 `json:"gust_kph"`
	} `json:"current"`
	Error struct {
		Code    int    `json:"code"`
		Message string `json:"message"`
	} `json:"error"`
}

var checkError bool

func getTemplate() *template.Template {
	tmpl := template.Must(template.ParseGlob("template/*"))
	return tmpl
}

func index(w http.ResponseWriter, r *http.Request) {
	tmpl := getTemplate()
	var errorMessage string
	var messageFlag bool
	if checkError == true {
		messageFlag = true
		// fmt.Println(checkError)
		checkError = false
		errorMessage = "Invalid Input"

	}

	tmpl.ExecuteTemplate(w, "index.html", struct {
		CheckError bool
		Message    string
	}{messageFlag, errorMessage})
}
func show(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		// fmt.Println("Hitted button then executed this line")
		name := r.FormValue("name")
		// fmt.Println(name)
		resp, _ := http.Get("http://api.weatherapi.com/v1/current.json?key=446fdedf48c84668b00122428210502&q=" + name)
		weatherData, _ := ioutil.ReadAll(resp.Body)
		var wData AutoGenerated
		json.Unmarshal(weatherData, &wData)

		if wData.Error.Code == 1006 {
			wData.HasError = true
			checkError = true
			http.Redirect(w, r, "/", 301)
		} else {
			// fmt.Println(wData)
			tmpl := getTemplate()
			tmpl.ExecuteTemplate(w, "show.html", wData)
		}
	}
	http.Redirect(w, r, "/", 301)
}
func main() {
	http.HandleFunc("/", index)
	http.HandleFunc("/show", show)
	fmt.Println("Server started")
	http.ListenAndServe(":9000", nil)
}
