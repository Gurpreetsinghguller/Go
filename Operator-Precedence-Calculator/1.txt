package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
)

type AutoGenerated struct {
	Number   []string `json:"number"`
	Operator []string `json:"operator"`
}
type Result struct {
	Result string
}

func CheckError(err error) {
	if err != nil {
		log.Fatal(err)
	}

}
func Calculator(w http.ResponseWriter, r *http.Request) {
	body, _ := ioutil.ReadAll(r.Body)
	var data AutoGenerated
	err := json.Unmarshal(body, &data)
	CheckError(err)
	result := Calculation(data)
	pbyte, err := json.Marshal(result)
	CheckError(err)
	w.Write([]byte(pbyte))

}
func Calculation(data AutoGenerated) int {
	//Converting String array into Integer
	var number []int
	for i := 0; i < len(data.Number); i++ {
		val, _ := strconv.Atoi(data.Number[i])
		number = append(number, val)
	}
	//Calculator logic
	// if len(number) == 1 {
	// 	return number[0]
	// }
	var result int
	temp := number[0]
	for i := 0; i < len(number); i++ {
		if i == 0 {
			continue
		}
		// result = number[i]
		for j := i - 1; i < len(data.Operator); j++ {
			if data.Operator[j] == "+" {
				temp += number[i]
				break
			} else if data.Operator[j] == "-" {
				temp -= number[i]
				break
			} else if data.Operator[j] == "/" {
				result /= number[i]
				break
			}
			if data.Operator[j] == "=" {
				return result
			}
		}

	}

	return result
}
func main() {

	fs := http.FileServer(http.Dir("./static"))
	http.Handle("/", fs)
	http.HandleFunc("/calc", Calculator)
	fmt.Println("Server started at 9000")
	http.ListenAndServe(":9000", nil)
}

